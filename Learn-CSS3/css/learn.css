/* CSS  => Cascade style sheet 
{ } = curly braces
;   = semi-colon
_   = under school
*/
/*good*/
._good, .-good {
    color: red;
}

/*bad*/
.bad{

    color:red;
}



/*declaration methods in CSS3*/
/* External style sheet
            <link rel="stylesheet" href="elzero-ex.css">
   Internal style sheet
            <style></style>
   inline style sheet
            <p style="color: red;"></p>      */


/*Roles of Declaration
-do not begin with the special character or number
-class can take more the same name [begin with .]
-id take one name[begin with #]
-do not write capital name for declaring   */






/* background => color, image, repeat, attachment, position, size */
div {
    background-color: transparent;
    /*make a background of inputs or .... transparent*/
    background-color: red;
    /*color name*/
    background-color: #0000ff;
    /*color name*/
    background-color: rgb(0, 255, 47,0.9);
    /*red green blue =>alpha channel(IN , number)*/
    background-image: url("../css/css-images/css\ image.PNG");
    background-repeat: no-repeat;
    /*this is has a default value(without write him)*/
    background-repeat: repeat-x;
    /*for repeat image horizontal*/
    background-repeat: repeat-y;
    /*for repeat image vertical*/
    background-repeat: no-repeat;
    background-attachment: fixed;
    /*fixed image*/
    background-attachment: scroll;
    /*default value is scroll*/
    background-position: left top;
    /*use position(right center left bottom)*/
    background-position: 0% 0%;
    /*right bottom*/
    background-size:cover;
    /*default value is auto but the best is cover for all content*/
    background-size: 100% 100%;
    /*width and height of the image on website use in (px or %)*/
}



/*padding margin*/
div{
    /*width and height that we take in image*/
    width: 100px;
    height: 100px;
    /*top right bottom left */
    /* (any direction have inverse direction and it has the same value) */
    padding:10px 10px 10px 10px;
    padding-top: 10px;
    padding-left: 10px;
    padding-bottom: 10px;
    padding-right: 10px;
    /*top right bottom left */
    /* (any direction have inverse direction and it has the same value) */
    margin:10px 10px 10px 10px ;
    margin-bottom: 10px;
    margin-right: 10px;
    margin-left: 10px;
    margin-top:10px;
    /*    different between padding and margin
    margin accept a negative value but padding no
    when you take the width of element the best practice use :
                            margin:auto;                  
     padding = move the content with the div 
     margin= move the all div   */
}



div{
    /*border outline */
    /*border*/
     /*top right bottom left*/
    border-color: red rgb(21, 0, 246) green yellow ;
    border-style:solid double dotted ridge;
    border-width:15px 10px 30px 0px;
     /*best practice*/
    border:10px red solid;

    /*outline (like border but is outline)*/
     /*one direction*/
    outline-color:#0000ff;
    outline-style: double;
    outline-width: 10px;
     /*best practice*/
     outline:10px red solid;

     /*outline does not take of size of element but border yes it take*/
}



div{
    /*display inline,block,inline-block*/
    /*display is a method of showing the elements*/

    /* block
    -take full width If no width
    -add line break
    -Respect padding,margin,width,height */

    /* inline
    -do not respect width and height
    -do not add a line break
    -Respect padding and margin [just left + right]
    
    /* inline-block
    -respect padding margin width and height
    -do not take full width it take width and height of words
    -best practice use width:fit-content;            */
div{
    background-color: rgb(235, 230, 230);
    padding: 10px;
    margin: 10px;
    width: 100px;
    }
}



/*display and visibility*/
/* display
    display:none=>make an element invisible
    display=do not sava the place of the element
    display type = none,block,inline,inline-block
    
    visibility:hidden=>make an element invisible
    visibility = save the place of the element
    visibility type = use hidden or default value is visible */
span {
    background-color: #EEE;
    display: block;
    padding: 10px;
    margin: 10px;
}
.first {
    visibility: hidden;
}



/*grouping multiple selector*/
/*for a lot of classes use (best practice) = .class1,
                             .class3,
                             .class4   */
.one, .two, .tree, .four, .my-first{
    padding: 10px;
    margin: 10px;
    font-family: arial;
    font-weight: 700px;
    background-color: aliceblue;
}



/*Nesting*/
 /* for the detection the classes + for no repeat the code  */
div .special {
    color: red;
}



/*dimension of width + height*/
/*use min and max for width and height*/
.name1, .name2, .name3, .name4{
    color: rgb(255, 255, 255);
   background-color:black;
    max-width: 200px;
    min-width: 100px;
    max-width:100px;
    min-height: 100px;
    max-height: 100px;
} 



/*overflow [flux]*/

/*default value is visible*/
p {
    background-color: #da4343ee;
    width: 300px;
    height: 70px;
    overflow: scroll;
    overflow-x: hidden;
    overflow: auto;
    overflow-y: visible;
    overflow: hidden;
    text-overflow: ellipsis; /*for  three point ....*/
}






/*text*/

/*Text Shadow*/

/*text-shadow=> horizontal-shadow  vertical-shadow  blur(dababe)  color */
.test-shadow {
    text-shadow: -3px -3px 2px rgb(255, 0, 0);
}



/*Text Alignment*/

/* Alignment text, direction, vertical alignment
  /*text-align=>center, left or right
  direction=>rtl[right to left=>use in arabic], ltr[left to right=>use in english]
  vertical-align=>make an image between two text 
       middle => image between text and another text
       top => make a top text
       bottom => make a bottom text */
.test-shadow {
    text-shadow: -0px 0.5px 0px rgb(255, 0, 0);
    text-align: center;
    direction: rtl;
}
.test-shadow img {
    vertical-align: middle;
}




/*text spacing*/

/*letter spacing, indentation, line height,
    word-spacing, whitespace(warping), opacity
    letter-spacing => for space between letter
    text-indent => for space before phrase.
    line-height => for space with line.
    word-spacing => for space between word
    white-space => for no warping with the paragraph
            normal => default value
            nowrap => for no warping
    word-break => if we have a overflow we use break for words
            break-all => break the all overflowing
            break-word => break the overflow just
            normal => default value 
    opacity => like alpha in rgb(color) but alpha for all element
                     */
.text-spacing {
    letter-spacing:-0.75px;
    word-spacing: 0px;
    line-height: 1.6;
    text-indent: 10px;
    text-align: center;
    text-shadow: 0px -0px 0.5px rgb(255, 128, 0);
    direction: ltr;
    white-space: normal;
    word-break: break-word;
    opacity: 0;
}



/*inheritance*/

/*inherit => for inherit the character of the element in another element
  like div and paragraph => that can help to write more code 
  can you use inherit in any element.*/
div {
    background-color: #eee;
    width: fit-content;
    border: 2px solid red;
    margin: 210px;
    text-align: center;
    padding: 10px;
}
div p {
    border: inherit;
    padding: inherit;
    color: inherit;
    margin: inherit;
    text-align: inherit;
}



/*fonts*/
/*font family*/

/*  methods 
        font-family:family of fonts; => if device 
        do not support this font pass a second font
        by link => we can go to google font and choose 
        the font with the link && add the link in head  */
.inherit p {
    border: inherit;
    font-family: 'Courier New', Courier, monospace;
}



/*font size*/
/*
 CSS Units
  - px => default font size for web page is 16px
  - em => time
  - rem => root time => take in the root
  - vw => view port width => 1% of width of the page [900px => 1% is 9 => 1vw => 9]
  - percentage => span is take the value in div [100% = 10px, 200% = 20px, 350% = 35px]
                   if I do not say it take in default value 16px.


 Read 
  - vmin => like vw
  - vh => like vw

 1em = 16px this is wrong 
*/
p {
    font-size: 10px; /*this is root have 10px so 1rem = 10px*/
    font-size: 2em;
    font-size: 2rem;
    font-size: 5vw;
    font-size: 100%;
}



/*font weight, font style, variant*/
/*
    font-weight => can use number [there is style do not responsive some number]
    font-style => can use italic or normal ...
    font-variant => can use small-caps or normal...*/
.inherit p {
    font-style: normal;
    font-weight: lighter;
    font-variant: small-caps;
}



/*cursor mouse*/
/*detect cursor type of your element => for user experience*/
div{
    cursor: pointer;
    cursor: auto;
    cursor: crosshair;
}


/*distribution of element*/


/*display inline block*/
/*
we use inline block for distribute the element but is not between 
the best practice
*/

/*float and clear*/
/*          
 float => for parent
 - like display inline block => it distribute the element
 - float is flowing out background
 - the problem is flow => solution is overflow(hidden) or take the background a height.
   but that is not enough
 clear
 - must add a P name clear inside div for solve the problem => and we take to P 
  clear value (both) */
/*
<div class="float">
    <div>product one</div>
    <div>product two</div>
    <div>product tree</div>
    <div>product four</div>
    <p class="clear"></p>
</div>   
    <p>hello world</p>  
*/

.float {
    background-color: red;
    padding: 10px;
    overflow: hidden;
    height: 100px;
}
.clear {
    clear: both;
}

/*mastering the CSS calculation*/
/*
this method use with float
content width is : 100%
we have 5 element so there is 6 space
6 space 1% * 6 => 6% From content width
100% - 6% => 94% available space
5 element The width Is:  94% / 5 => EVERY ELEMENT TAKE 18.8

content width is : 100%
we have 4 element so there 5 space
5 space 15px * 5 => 75px From content width
100% - 75px available space
4 element the width is:  (100% - 75px) / 5 
*/
.calculation div {
    float: left;
    background-color: blueviolet;
    width: calc((100% - 100px) / 4);/*say the structure of calc*/
    width: calc((100% - 95%) / 4);
    margin-left: 1%;
    margin-left: 20px;
}




/*position*/
/*
-Static => default => unaffected (it is cte).

-Relative => move in himself 
  for me => top = bottom.... 
  unaffected of element

-Absolute => move in relation to the element (body or div...) it is in 
  for me => top = top....
  [the element must take position relative] 
  unaffected element

-Fixed => move with you (scroll with you)
  for me => top = top....
  unaffected element

-Sticky => move with you (scroll with you) but
  say the position that want to scroll with you
  for me => top = top....
  unaffected element 

*/
div{
    background: red;
    padding: 100px;
    position: relative;
}
div .zero{
    position: static;
    top: 100000px;
}
div .one{
    position: absolute;
    right: 0;
}
div .two{
    position: fixed;
    top:100px;
}
div .tree{
    position: sticky;
    top:10px;
}



/*z-index*/
/*
it works with any position
z-index => arranges layered items => big number is first layer
           for last layer take the z-index -1
*/
div{
    position: absolute;/*work with position*/
}
div .one{
    z-index: 12;/*second layer*/
}
div .two {
    z-index: 13;/*first layer*/
}
div .three {
    z-index: -1;/*last layer*/
}



/*list-style[image, position and type]*/
/*
image => add an image after list item(icons)
position => inside or outside
            inside =>  background covers icons
            outside => background do not covers icons
type => type of style
*/
ul{
    list-style: armenian inside url("name of image in folder");
    list-style-type: armenian;
    list-style-position: outside;
    list-style-image: url("name of image in folder");
}
li{
    background-color: #EEEE;
    margin-bottom: 10px;
    list-style-position: inside; /*type icon inside background*/
}



/*table spacing*/
/*
border-spacing => space with column(cell)
use nesting 
*/
table {
    border: 1px black solid;
    text-align: center;
    width: 100%;
    border-spacing: 10px;
    font-family: Arial, Helvetica, sans-serif;
}
table td {
    border: 1px black solid;
    background-color: #eeee;
    padding: 10px;
}
table thead td {
    background-color: #ffaa0070;
    font-weight: 700;  /*you can table head (th)*/
}
table tfoot tr td {
    background-color: rgb(184, 91, 91);
    color: white;
    font-weight: 700;
    font-style: italic;
    font-variant: small-caps;
    font-size: 20px;
}



/*for testing => go to inspect => forces states*/
/*:pseudo classes*/
/* hover, visited, checked, empty, focus
hover => when I put the cursor on element some 
  propriety of element change(color, background...)

visited => when I visited some links it change some
  propriety change (color...)

checked => when I checked some propriety some others
  element change or the element that I click change

empty => all empty element give him some propriety 
   like (color or background...)ç
   
focus => when I focus some propriety change

class:nth-child(2n) => Specific for table => Every Pair value has take somethings

*/
tr:nth-child(2n) {
    background-color: #eee;
}
tr:nth-last-child(2n) {
    background-color: #eee;
}
a {
    text-decoration: none;
}
a:hover {
    color: red;  /*hover*/
    cursor: pointer;
}
a:visited {
    color: rgb(38, 255, 0);  /*visited*/
}
.check:checked + label {
    color: rgb(0, 0, 255); /*change the color of label*/
}
.check:checked {
   display: none; /*when I checked checkbox take display none */
}
:empty {
    border: 0px red solid; /*all empty element take a border*/
}
p:empty {
    border: red 2px solid; /*empty paragraph take border*/
}
.in {
    border: 1px black solid;
}
.in:focus {
    border: 2px #00fbff solid; /*when I focus we say the border in input*/
}


/*::pseudo element*/
/*first letter,first line and selection
first-letter => for first letter in paragraph
first-line => for first line in paragraph
::selection => for change the some propriety of selection
*/
p::first-letter{
    color: red;
}
p::first-line{
    color: yellow;
}
::selection{
    background-color: black;
    color: yellow;
}
p::selection{
    background-color: black;
    color: yellow;
}


/*pseudo element*/
/*before, after & content
::before => add an element before paragraph or div...
::after => add an element after P or div...
content => must add an empty content when we add an element
*/
.boy{
    position: relative; /* moving in element in .boy */
}
.boy::after {
    content: "";  /* if you want to write some things write */
    background-color: rgb(255, 0, 0);
    width: 5px;
    height: 100%;
    position: absolute;
    top: 0px;
    right: 0px;
}

.boy::before {
    content: "";
    background-color: transparent; /*make a border transparent*/
    position: absolute;
    top: 40%;
    left: -19.5px;
    border-width: 10px;
    border-color: transparent rgb(0, 253, 84) transparent transparent;
    border-style: solid;
}

.pipeline {
    background-color: rgb(255, 0, 0); 
      /* another method for add an element before or
      after paragraph by add an empty span in .boy */
    width: 5px;
    height: 100%;
    position: absolute;
    top: 0px;
    right: -8px;
}


/*pseudo element*/
/* Content & Training
    Content => use a container have outside a div or paragraph
       -counter-increment => use in container & give him a name
       -content:counter(name); => use in element that outside container
            <div class="container">
                <div class="boy" data-text="somethings">lorem...</div>
            </div>
*/
/*important*/
.parent-product p {
    counter-increment: counter-product;
}
.parent-product p::before {
    content: counter(counter-product);
    background-color: rgb(215, 14, 88); /* can modifier the back & color ...*/
    color: white;
    padding: 10px;
    position: absolute;
    left: 0;
    top: 0;
}

.container {
    counter-increment: counter-name; /*any name*/
}
.boy::after {
    content: counter(counter-name); /*reply the name*/
    background-color: red;
}
.boy::before {
    content: attr(data-text); /*name of attr*/
    font-family: Arial, Helvetica, sans-serif;
    display: none;
}
.boy:hover::before {
    display: block; /*hover of class (.boy)*/
}



/*vendors prefixes */
/* 
problem :
there is some propriety in css does not supported by some version
of some browsers like :
Chrome
Safari 
Firefox
Opera
AI, Edge

[1] => new css feature(privilege) appeared
[2] => browsers tests the feature in version X
[3] => browsers add prefixes to give developers the ability to use it
[4] => the features fully supported in version Y
 
webkit => chrome, safari, new opera version
moz => mozilla(firefox)
o => old version of opera
ms => IE, Edge
 
just solution :
[1] => Most users use new browsers version
[2] => VS code there is an Addon to add the Prefixes (css prefix auto)
[3] => task runner (help to write the prefix)
*/
.class {
    -webkit-border-radius: 10px;
    -ms-border-radius: 10px;
    -o-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
}


/*border-radius box-shadow text-shadow box-sizing*/
/*
border-radius =>left right right left 
    can do any shapes that you want
    for element and inputs

box-shadow => H-shadow V-shadow blur spread color inset(default is outset)
    for element
    can do more shadow

text-shadow => H-shadow V.shadow blur color
    for text
    can do more shadow
    
box-sizing => content-box, border-box
    content-box => default take in width and height thought(padding, margin or border...)
    border-box => respect the height, take of width

    use in all element by the code in bottom
*/
* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
.border {
    border-top-left-radius: 10px 20px;
    border-top-right-radius: 10px 10px;
    border-bottom-right-radius: 10px 0px;
    border-bottom-left-radius: 10px;
    border-radius: 10px 0px;  /*best practice*/

    box-shadow: 0px 10px 3px 2px #eee inset,
    1px 0px 0px 3px #1c1f1f;
    text-shadow: 0px 0px 2px rgba(0, 42, 255, 0.578), 
    0px 2px 10px greenyellow; /*best practice*/

    box-sizing: border-box;
}


/*transform*/
/*for text
capitalize => for capital first letter
lowercase => for small letter
uppercase => for capital letter

*/
/*Transition*/
/*
- Duration => time that spent for transfer to another place
- Delay => time that spent for back the original position
- property => element that want to accept the transition
    all  => all element
    margin-left, padding.right, width and height... 
- Timing function => control the fast of transition
    ease => slow fast slow (default)
    linear => same speed
    ease-in => slow begin
    ease-out => slow end
    ease-in-out => slow begin and slow speed


*/
.transition {
    transition-duration: 3s;
    transition-delay: .2s;
    transition-property: width;
    transition-timing-function: ease-in;
    transition: 3s 2s all ease-in;
    /*duration delay property timing-function*/
    transition: width 3s, height 2s linear;
    /*height in 3s & width in 2s*/
}
.transition:hover {
    width: 200px;
}
.transition {
    transition: all .5s 0s ease;
}
.down {
    transition: all 1s .5s ease;
}

.transition:hover {
    margin-top: 30px; /*when I hover transition element was top 30px*/
}
.transition:hover .down {
    margin-top: 30px;/*when I hover down element was top 30px in 1s & return in .5s*/
}

/* !important Declaration*/
/*
!important => the property that have important is first things that execute
  for modifier another code 
*/
.important {
    background-color: blue !important;
}



/*The Margin Collapse*/
/* collapse is margin property
 when two element contact between him
[1] => Only vertical margin collapse(accept the margin propriety)
[2] => Bigger Margin Win
[3] => nesting does not prevents collapsing
[4] => must doesn't exist any element between him 
*/
.up {
    background-color: green;
    height: 65px;
    width: 50%;
    float: left; /*sans results si en ecrire margin-right*/
    margin-bottom: 20px;
    margin-left: 50%;
}
.down {
    background-color: red;
    width: 50%;
    height: 65px;
    margin-left: 50%;
}



/*CSS Variables*/
/*
Global variable
var(variableName, Fallback value) => first letter of name is Capital
    fallback value => make for variable name

Local variable
*/

:root {
    --mainColor: blue; /*global variables*/
    --mainPadding: 20px; 
}
.main-div {
    background-color: var(--mainColor, black);
    color: white;
    padding: 10px;
}
.main-title {
    background: #eee;
    color: red;
    padding: calc(5px + var(--mainPadding));
}

.local {
    --mainColor: rgb(72, 0, 255);  /*local variables*/
    background-color: var(--mainColor);  /*global var*/
    --mainPadding: 40px;   /*strong*/
    padding: var(--mainPadding);   /*weak*/
}




/*Flexible box*/
/* part1
For parent 
 -display: flex => To start flexible box => for distributer the element 

 -Flex-direction => direction of the element
    row=> horizontal element (one two three) => default value
    row-reverse => horizontal element (three two one) It change place me too
    column => vertical element (one two three)
    column-reverse => vertical element (three two one)

 -Flex-wrap => when we add some element
    nowrap => default is no wrapping
    wrap => wrapping
    wrap-reverse  => reverse the element (three two one)
 
 -Flex-flow => [flex-direction] + [flex-wrap]
                 -----------------
 -justify-content => control element direction (Horizontal)
    flex-start => ltr => default value 
    flex-end => rtl 
    center => make element in center
    space-between => space(leftover space) between elements
    space-around => space (leftover space) around elements
    space evenly => space (leftover space) between and around elements
    center => make element in center using align items

 -align-items => take just element (Vertical direction)
    stretch => default value
    flex-start => text on & lack the height
    flex-end => text under
    center => text center

 -align-content => take all content (with the content)
    stretch => default value
    flex-start => content on
    flex-end => content under
    center => content center
    space-between => space between two content
    space-around => space around two content
    space-evenly => space between and around two content


For child 
 -flex-grow => for growing the element
    0 => default value
    big number is big element (in this use case using the classes)
    flex-grow :3; => element grow three time of other element 

 -flex-shrink => reverse of growing
    1 => default value
    big number is small element (in this use case using the classes)
    flex-shrink :3; => element shrink three time of other element 

 -order => changer the place of element by number of element
     order: 1; => 2 replace 1
     order: -1; => replace the element after all elements

 -align-self => like align items but in take to the child

*/ 

.flex {
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    flex-flow: nowrap column;
    justify-content: flex-start;
    justify-content: space-between;/* leftover width is 4% */
    align-content: flex-end;
}
.flex div {
    width: calc(96% / 3); /* leftover is 4% */
    flex-grow: 3; 
    flex-shrink: 2;
    order: 3;
}
.center {
    background-color: blue;
    align-items: center;
    justify-content: center;
}
/*REMARQUE*/
/*
text-transform => for capital or small letter
text-overflow => overflow with ...
rem => size of root [root has 10px  =>   1rem = 10px]
opacity => alpha for element with the content
line-height: 65px; => for down or up items in div
margin: 20px auto; => use that
*/

/* part2
For Child
flex-basis => like width or height
   -auto => default value
   -take in px or percentage (css units)
   -take width when say flex direction row
   -take height when say flex direction column
   -respect max width & max height

flex: [flex-grow] [flex-shrink] [flex-basis] => 0 1 auto

For parent
inline-flex => add element X to element Y
-take in element X and element Y
*/

.parent {
    flex-direction: column;
}
.child {
    align-self: flex-start; /*for delete the stretch*/
    flex-basis: 300px; /*height is 300px*/
    flex-grow: 3;
    flex-shrink: 2;
    flex: 3 2 300px; /*for one code*/
}
.element1 {
    display: inline-flex;
}
.element2 {
    display: inline-flex;
}

/*REMARQUE*/
/*
justify-content => Horizontal direction
align-items => Vertical direction
align-content => Vertical direction
    notice when the flex direction is a column justify content 
    change to the VERTICAL and align items to the HORIZONTAL.
for training play froggy game
*/




/*filters*/
/*
grayscale => black white photo in percentage (0% to 100%)
blur => in px
invert => make a reverse image in number (1 to 100)
*/
.image-filter {
    transition: 2s .3s all linear;
    filter: grayscale(100%);
    -webkit-filter: blur(100px);
}
.image-filter:hover {
    filter: grayscale(0%);
    -webkit-filter: grayscale(0%);
}

/*Gradients*/
/*
linear-gradient() => Direction(can be in deg) || Angle, color stop 1,color stop 2,....
   -direction => can be in deg
   -color => can do 30%

*/
.gradients {
    background-image: linear-gradient(to top, red, green);
    width: 400px;
    height: 100px;
    background-color: #eee;
    position: relative;
}

.gradients::before {
    content: "  ";
    position: absolute;
    top: -4px;
    right: 0;
    background-color: red;
    width: 100%;
    height: 4px;
    background-image: linear-gradient(to right,
        #25cf25 20%,
        #7575fb 20%,
        #7575fb 30%,
        #ff0000 30%,
        #ff0000 50%,
        #ffff00 50%,
        #ffff00 70%,
        #8a2be2 70%,
        #8a2be2 90%,
        #0000ff 90%,
        #0000ff 100%);
}

/*Pointer events & Caret color*/
/*
cart-color => for color of caret
pointer-events => for cancel all events of the element
*/
p {
    caret-color: transparent;
}
a {
    pointer-events: none;/*Cancel the black color*/
}
a:hover {
    color: black;
}




/*Grid*/
/*For parent
-display: grid | inline-grid(give Into Element X & Element Y)
-grid-template-column & grid-template-rows => [Number Of colum in] =>
    Px  => in px
    % => in percentage
    Auto => automatic it is Shy
    Fraction => like fraction but it is Greedy
    repeat(nbr columns, auto or width or Fr)
    Mix => repeat()   Px   %   repeat()
        Fraction => Whatever the space the width does not grow
        Auto => space grow
    minmax(100px 200px) => space between 100px & 200px
    repeat(auto-fill, 200px) => Filling space By existing space
                [without Using the Width]
    repeat(auto-fill, minmax(100px, 300px))

-row-gap => space between gap row
-column-gap => space between gap column   
    gap => [row-gap & column gap]

-justify-content => for horizontal direction
     -flex-start ,flex-end ,center
     -space-between ,space-around,space-evenly
-align-content => for Vertical direction
     -flex-start ,flex-end ,center
     -space-between ,space-around,space-evenly

-grid-template-area => write the areas(Any Names)
     grid-area: name;
*/

.parent-grid {
    background-color: #eee;
    width: 600px;
    height: 400px;
    margin: 20px auto;

    display: grid;
    grid-template-columns: auto auto auto auto;/*  =  */
    grid-template-rows: repeat(2, auto);
    grid-template-columns: auto 1fr; /* Fraction take all width */
    grid-template-rows: repeat(2,auto) 2fr; /* Greedy Fraction */

    row-gap: 20px;
    column-gap: 30px;
    gap: 20px 30px; /* Short hind */
    align-content: space-evenly; /* space between Elements */
    justify-content: space-evenly; /* space evenly Element */

    grid-template-columns: repeat(10, 1fr); /* ten columns */
    grid-template-columns: repeat(auto-fill, minmax(200px 1fr));
    grid-template-rows: 50px auto 50px; /* First & Last take 50Px */
    grid-template-areas: "logo logo logo nav nav nav nav nav nav nav"
     "cont cont cont cont cont cont . side side side "
     "foot foot foot foot foot foot foot foot foot foot";
     /* .  means this is a empty place & it take one columns  */
}

h2 {
    grid-area: logo; /* Important */
    background-color: red;
}
nav  {
    grid-area: nav; /* Declaring */
}
section {
    grid-area: cont;
}


/* For child
grid-column => Take the space Horizontal Or Vertical 
    grid-column-start: 1; => begin Whit column 1
    grid-column-end: 3; => end Whit column 3 
        Short hind => grid-column: 1/3; => He Take 2 column
        best practice => grid-column: span 4; => He Take 4 column
    grid-column: 2 / span 3;

grid-row => Take the space Vertical 
    grid-row-start: 1; => begin Whit row 1
    grid-row-end: 3; => end Whit row 3 
        Short hind => grid-row: 1/3; => He Take 2 row
        best practice => grid-row: span 4; => He Take 4 row
    grid-row: 2 / span 3;

grid-area => [grid-row-start] [grid-column-start] [grid-row-end] [grid-column-end]
    grid-area: 2 / 2 / 11 / 4; 

grid-area & grid-template-areas
    grid-template-area: "head head head"; => element Take 3 column
    grid-area: head;
*/

.child {
    grid-column: 1 / 3; /* begin in 1, end in 3, take 2 column */
    grid-column: span 3; /*begin in 1, end in 4, take 3 column */
    grid-column: 2 / span 4; /* begin 2, take 4 */
    grid-row: 2 / span 6; /* begin 3, take 6 row */

    grid-row-start: 2;
    grid-column-start: 2;
    grid-row-end: 11;
    grid-column-end: 4;
    grid-area: 2 / 2 / 11 / 4; /* Short Hind */
}

/* grid-area & grid-template-areas */
.child {
    grid-area: head;
}
.parent {
    grid-template-areas: "head head head";
}




/* 2D Transform 
Scale
    Scale X => scale the element in axe X
    Scale Y => scale the element in axe Y
    Scale => Short Hind
    If I write Scale(2) =>X & Y Take value 2
Rotate
    deg => degree
    grad => gradients
    rad => radians
    turn => 1 turn
Translate(translateX, translateY)
    CSS Units
Skew(SkewX, SkewY)
    Units => deg, grad, rad, turn
    use Pseudo Element For do not skew move with the background
Matrix
    Syntax => [(ScaleX), (SkewY), (SkewX), (ScaleY), (TranslateX), (TranslateY)]
*/               
.scale {
    transform: scaleX(1.5);
    transform: scaleY(2);
    transform: scale(3, 2); /*Short Hind*/
    transition: .4s .2s all linear;

    transform: rotate(100deg);
    transform: rotate(10grad);
    transform: rotate(10rad);

    transform: translateX(10px);
    transform: translateX(-100px);
    transform: translateY(10px);
    transform: translate(-100px);
    transform: translate(10px, 100px);

    transform: skewX(10deg);
    transform: skewY(4grad);
    transform: skew(10deg, 4grad);
    
    /* Not The Same */
    transform: matrix(1.2, 0.2679, 0, 1.2, 20, 20);/* Translate The First */
    transform: scaleX(1.2) skewY(15deg) skewX(0)
    scaleY(1.2) translateX(20px) translateY(20px);
    /* The same */
    transform: matrix(1.2, 0.2679, 0, 1.2, 20, 20);
    transform: translateX(20px) translateY(20px) scaleX(1.2) 
    scaleY(1.2) skewX(0) skewY(15deg);
}

/* 
Transform-origin 
Syntax
default Value => 50% 50% 0% => 0% For Z-Axis
2D Transform => transform-origin(X,Y)
3D Transform=>transform-origin(X, Y, Z)

X-Axis
    - CSS Units [px, em ,rem, vw...]
    - %
    - Keywords
    -- left = 0%
    -- Center = 50%
    -- Right = 100%
Y-Axis
    - CSS Units [px, em ,rem, vw...]
    - %
    - keywords
    -- Top = 0%
    -- Center = 50%
    -- Bottom = 100% 
*/

.transform-origin {
    position: relative;
    transform-origin: left top;
    transform: rotate(27deg);

    transform-origin: 43% top;
    transform: rotate(138deg);

    transform-origin: right bottom;
    transform: rotate(97deg);

    transform-origin: 50% 50%;/* center center */
    transform: rotate(300deg);
}
.transform-origin span {
    background-color: red;
    border-radius: 100%;

    position: absolute;
    left: 0;
    top: 0;

    position: absolute;
    left: 43%;
    top: 0;

    position: absolute;
    right: 0;
    bottom: 0;

    position: absolute;
    left: 50%;
    top: 50%;
}



/* Transform */
/* 3D
Rotate => RotateX, RotateY, RotateZ
    -deg
    -grad
    -rad
    -turn
Translate & Perspective & Perspective-origin
    -Translate => For X, Y, Z => Work with the perspective
    -Perspective => For Parent => Put The Distance Between You & Element
    -Perspective-origin => For parent => Work with The Perspective
*/

.child {
    transform: rotateX(100deg);
    transform: rotateY(360deg);
    transform: rotateZ(20deg);
    transform: rotate3d(1, 1, 1, 20deg);

    transform: translate3d(0, 0, 30px);
}
.parent{
    perspective: 200px;
    perspective-origin: left top;
}
.parent:hover .child {
    transform: translate3d(10px, 10px, 10px);
}

/* backface-visibility & Transform-Style

Transform-Style => Make you element: => For Parent 
    -Flat => For 2D Transform => Make your element flat
    -preserve-3d => For 3D transform => Make the element reserve the state 
backface-visibility => For Child => use with the rotate
    -hidden 
    -visible => Default value
*/

.parent {
    transform-style: preserve-3d;
}
.box .front {
    background-color: red;
}
.box .back {
    background-color: green;
    transform: rotateY(180deg);
    backface-visibility: hidden;
}
.box:hover {
    transform: rotateY(180deg);
}





/* animation */
/* All Propriety Give To Element That Have an animation

Keyframes => Have a Name 
animation-duration
animation-name => name that give to Keyframes

animation-iteration-count => For Type of counter (use in spin)
    infinity => infinity turn
    number => 2 or 10 => 2 turn

animation-direction => direction of the animation
    normal => Default value
    reverse => reverse direction
    alternate => front and back ....
    alternate-reverse => back and front ...

animation-delay => time that want the animation begin
    10s => after 10s animation begin
    -10s => before 10s animation begin(Animation into Animation)

animation-fill-mode => Take Last style of @Keyframe
    none => Default value
    forwards => Take Last keyframe Style
    backwards => Take first Keyframe Style
    both => Take Last and First (For first change the direction)
    ---first => direction is reverse
    ---last => direction is normal

animation-play-state => If animation Running or No
    running => default value
    paused => animation does not running & Use in Hover   
    
Short Hind => Duration before Delay
*/
.animation {
    animation-name: style; /* Name */
    animation-duration: 2s; /* duration of animation in second */
    animation-timing-function: linear; /* typing moving animation */
    animation-delay: 0s; /* begin time animation */
    animation-iteration-count: infinite;  /* counter animation */
    animation-direction: reverse; /* direction keyframes */
    animation-fill-mode: both;  /* animation mode */
    animation-play-state: running; /* case of animation */

    /* Short hind */
    animation: name 2s linear infinite reverse 10 10s both running;
}

@keyframes change-color{  
    /* For Beginner */
    from {
        background-color: black;
    } 
    to {
        background-color: #eee;
    }
    /* Best Practice */
    0% {
        background-color: black;
    } 
    25% {
        background-color:gray;
    }
    100% {
        background-color: #5afd5a;
    } 
}
/* Rotate */
@keyframes spin {
    from {
        transform: rotate(0deg);
}
    to {
        transform: rotate(360deg);
    }
}


/* CSS Selector */
/* PART 1 */
/*
    - * => All element
    - Element =>  [p, div]  
    - Element other Element => div p
    - .class-name
    - #id name

    - .class-one.class-two => Element Have two class (class="free vip")
    - .class-name div, .class-name p => grouping

    - Element .class-name => Nesting
    - Element.class-name => <Element class="class-name">

    - .parent .child=>Not Direct child=>there is a code between child and parent
    - .parent > .child => Direct child => no code between child and parent
        --- NO NESTING
*/

/* Element that have two classes 
<div class="face front"></div>
<div class="face back"></div>
*/

/* PART 2 */
/*
    - Element + other Element => [div + p] => div continue with the paragraph
        -- paragraph takes the propriety value
    - Element ~ other element => [p ~ div] => like Direct(>) sibling(no nesting)
    
    - [Attribute] => [title] => all element that have a title attribute
    - Element[Attribute]=> div[title]=>all div that have a title attribute
    - [attribute = value] => type="search"
    - Element[attribute = value] => input[type = "search"]

    - Element[attribute ~= value] => contains a word 
        -- attribute that has this word
    - Element[attribute *= value] => contains a string 
        -- attribute that has this string
    - Element[attribute ^= value] => start with a string
        -- attribute that begin whit the value
*/

/* PART 3 */
/* Selector(that take the propriety):case
:first-child => first child for his parent(has a parent(body))
:last-child => last child for his parent(has parent(body))
----- If exist only it considered first and last child

:first-of-type => first element of type(may be has or not)
:last-of-type => last element of type(may be has or not)
----- If exist only considered first and last of type

:only-child => only child(has a parent)
:only-of-type => only child(has a parent)
----- p:only-of-type => parent that have a one P(may be exist another element)
----- .baby:only-child => parent that has only child names baby
*/

/* PART 4 */
/* class :....
:not(Selector) => P:not(.class) => all P without .class => P take the propriety
---- p.not(:first-of-type) => all P without first of type
:nth-child(n) => p:nth-child(2) => search 2th paragraph in parent
---- n => odd => for number impair
---- n => even => for number pair
:nth-last-child(n) => in back calcule in child
:nth-of-type(n) => calcule element have the same type
:nth-last-of-type(n) => calcule in back but of type
*/


/* PART 5 */
/* 
:root
:checked
:empty
:disabled
:required
:focus
::selection
::placeholder

*/
input[type="checkbox"]:checked + label {
     color: red; /* label take color red */

}
input:disabled {
    color: red;
    background-color: #25cf25;
    opacity: 0.6;
}
input:required+span {
    color: red;
}
input:required:focus {
    border: 2px red solid;
    outline: 0;
    color: red;
    caret-color: red;
}
div::selection {
    background-color: #25cf25;
    color: white;
}
input:required::placeholder {
    color: #25cf25;
}


/* MEdia Queries */
/* Responsive Design => Mobile First

- Structure of MEdia code
    @media not|only mediatype and (expressions) & Condition {
        CSS-Code;
    }

- Writing Code CSS
--- link Of File Media 
<link rel="stylesheet" media="mediatype" href="print.css">
--- Style Tag
<style media="mediatype"></style>
--- Best practice
Media Code after Element

- Concepts => (min-width: 0px) and (max-width: 767px)
- Mobile => 0px To 767px
- Small screen and Range => 768px To 991px
- Medium screen => 992px To 1999px
- Futures Updates=> This framework Use 1400px
- Large screen => 2000px




Type => 
    print => Css code about print

*/
@media print {
    div:first-child {
        background-color: red;
    }
}
@media (max-width:1000px) and (max-width:1200px) {
    div:first-child {
        background-color: red;/* show between 1000px and 1200px */
    }
}

/* Mobile */
@media (max-width: 767px) {
}

/* Small screen and Range  */
@media (min-width: 768px) and (max-width: 991px) {
}

/* Medium screen */
@media (min-width: 992px) and (max-width: 1999px) {
}

/* Large screen */
@media (min-width: 1200px) and (max-width:2000px) {
}


/* Create Your FrameWork */
/* Framework => Some things Repeat
Use in Html File
-- center & circle-100 is Framework repeat many time 
<div class="center circle-100"></div>
---- classes => border-100 font-20 weight-bold radius-50 

- Local Variables, Grouping, Short Hind
*/


/* CSS Global Value */
/* 
- inherit => You inherit Form The parent (border does not inherit)
- initial => Original Default value
- unset =>
    If inherit => inherit
    If Not => initial
- all: unset; => all propriety inherit OR initial
- revert CSS Level [4] => revert propriety of User agent
*/


/* How to Master */
/* 
CSS Battle
Front-end Mentor
Elzero Academy
codepen
*/












