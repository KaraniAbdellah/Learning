// Spring Data
/*
    - So Spring is big project and we have spring boot
        --> We Have Also Spring Data (JPA & Hibernate)
    - Before If We Want To Connect To Database we have "JDBC"
        --> we use native query like (select * from ...)
    - Know we have Spring Data:
        --> we have built in function
    - ORM(Object Relational Mapping): We Represent Table as java class and can insert, delete in java class
--------------------------------------
    - Spring Data (Entity):
        is we convert all table to ORM
    - Spring Boot (Repository):
        the direct interaction with database (insert, delete, ...) happen in this place
    - Spring Boot (DTO):
        is simple java class used to transfer the data between Controller and Client
*/


// Connect To Database
/*
    // app.proprieties:
        spring.datasource.url=jdbc:mysql://127.0.0.1:3306/student_management?useSSL=false&serverTimezone=\
          UTC&useLegacyDatatimeCode=false
        spring.datasource.username=abdellah
        spring.datasource.password=ABde12@2

        # Hibernate Property Here
        spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
        # Hibernate auto ddl
        spring.jpa.hibernate.ddl-auto=update
        logging.level.org.hibernate.SQL=DEBUG

    // Run Application and will be Connect Auto to Database

    // But How The Connect Just By Running
       --> spring boot read proprieties
       --> Scan The Project [Search for Entity, ...]
*/


// Insertion Value in Database
/*
    One Of The Method if To Create data.sql inside resources and type insert into ...
        --> if you find an error:
        add this: sprint.jpa.defer-datasource-initialization=true
*/


// Controllers
/*
    ResponseEntity<List<Student>>: type of response
    @RestController: make this class controller
    @RequestMapping("/api/student"): url of controller
    @GetMapping("getStudent"): url for get method
    return ResponseEntity.ok(students): send response with ok 200
    Student if simple bean (class)
*/
// StudentController.java
@RestController
@RequestMapping("/api/student")
public class StudentController {
    @GetMapping("getStudent")
    public ResponseEntity<List<Student>> getStudents() {
        System.out.println("Request Come to Get Student End Point");
        List<Student> students = new ArrayList<>();
        students.add(new Student(1, "a@gmail.com", "ahmed", "10202"));
        return ResponseEntity.ok(students);
    }
}



// @PathVariable & @RequestBody
/*
    --> I want to return A Specific Student [http://127.0.0.1:8080/api/student/getStudent/1]
        get student number 1 [@PathVariable]

    --> I Want to Send Data to Controller [@RequestBody]
---------------------------------------------------------------
    @PathVariable int id:
        Gets the {id} from the URL
    @RequestBody Student student:
        Reads the student data sent in the request body (usually in JSON).
    return ResponseEntity.ok(student);
        Sends back the same student object with HTTP 200 OK status.
-----------------------------------------------------------------
    @ResponseStatus(HttpStatus.CREATED): First Way To Set the status code of an HTTP response.
    return new ResponseEntity<>(student , HttpStatus.CREATED); Second Way To Return Response with status code
*/
// StudentController
public class StudentController {

    @GetMapping("getStudents")
    public ResponseEntity<List<Student>> getStudents() {
        System.out.println("Request Come to Get Student End Point");
        List<Student> students = new ArrayList<>();
        students.add(new Student(1, "a@gmail.com", "ahmed", "10202"));
        return ResponseEntity.ok(students);
    }

    @GetMapping("getStudent/{id}")
    public Student getStudentById(@PathVariable int id) {
        return new Student(id,"a@gmail.com", "ahmed", "10202");
    }

    @PostMapping("postStudent")
    @ResponseStatus(HttpStatus.CREATED) // When the method runs successfully, the response will return HTTP status 201 Created.
    public ResponseEntity<Student> postStudent(@RequestBody Student student) {
        System.out.println("The Student Id is: " + student.getStudent_id());
        return new ResponseEntity<>(student , HttpStatus.CREATED);
    }

    @PutMapping("updateStudent/{id}")
    public ResponseEntity<Student> updateStudent(@PathVariable int id) {
        Student updatedStudent = new Student(id, "a@gmail.com", "abdellah", "102993");
        return new ResponseEntity<>(updatedStudent, HttpStatus.valueOf(200));
    }

    @DeleteMapping("deleteStudent/{id}")
    public ResponseEntity<Student> updateStudent(@PathVariable int id, @RequestBody Student student) {
        System.out.println("The Student Received is:" + student.getStudent_id());
        return ResponseEntity.ok(student);
    }
}



// JpaRepository
/*
     JpaRepository<Student, Integer>: Interface Have A lot of Built in function to Interact with database
     <Student, Integer>: Student if Bean that will be handle, and Integer is type of primary key
*/
public interface StudentRepo extends JpaRepository<Student, Integer> {

}



// Services & @Autowired
/*
    @Autowired: lets StudentServiceImplementation access StudentRepo methods.
*/











