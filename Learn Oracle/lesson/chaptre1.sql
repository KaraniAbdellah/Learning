-- //////////// Create Table
create table students(
    student_id number generated by default as identity,
    first_name varchar(20),
    last_name varchar(30),
    email varchar(255) unique
);

create table teachers as select * from students;
drop table teachers;
create table teacher as select first_name, last_name, email from students;



-- //////////// Alter table
/*
	for Update The Structure Table:
		Add, Modify, Drop, Rename and Delete
	"ALTER TABLE table_name action;"
*/
-- Add New Colonne
alter table students add number_module number not null; 
alter table students add brithday Date not null;
alter table students add (number_module number not null,  brithday Date not null);

-- Modify Attribute of Table
alter table students modify (
    -- number_module number null, we can modify to null
	-- email varchar(99) not null This is already null
    first_name varchar(10) not null
);

-- Drop Column Of Table
alter table students drop (number_module, brithday);

-- Rename Column Of Table
alter table students rename column number_module to module_number;

-- Rename Table Name
alter table students rename to learners;



-- //////////// Virtual Column
/*
	is Column that own value calculated automaticlly
	"column_name [data_type] [GENERATED ALWAYS] AS (expression) [VIRTUAL];"

    Some limitations of virtual columns include:
        • Virtual columns are only supported in relational heap tables,
			but not in index-organized, external, object, clustered, or temporary tables.
        • The virtual column cannot be an Oracle-supplied data type, a user-defined type, or a LOB or LONG RAW type.
    The expression in the virtual column has the following restrictions:
        • It cannot reference other virtual columns.
        • It cannot reference regular columns from other tables.
        • It must return a scalar value.
        • It can reference a deterministic user-defined function, but if so, the virtual column cannot be used as a partitioning key column.
*/
create table employees (
    empl_id number not null unique,
    salary number not null,
    bonus number as ((salary * 10) / 100)
);
alter table students add (bonus number as (student_id * 2));




-- //////////// TRUNCATE TABLE && Define and Delete an Unused Column && Comments in table
/*
	TRUNCATE TABLE: Empty Table, it can delete all rows and free the space.
	
	SET UNUSED: 
		--> Please note: once a column is marked unused, you cannot recover this column.
		--> UNUSED means Clomun deleted logically and can be physically removed later.
		-->  ALTER TABLE table DROP UNUSED COLUMNS;

	Comments in Table:
		--> COMMENT Can Add max of 2000 octect
		--> Comment store in Data Dictionary
*/

truncate table students;
alter table employees set unused column bonus; 
comment on table employees is 'this is a comment for employees table';
SELECT * FROM user_tab_comments; -- display the employees comments --> user_tab_comments is vues --> we can find others also



-- //////////// Contraints
/*
    are rules that apply in each column in the table.
	- Not null, unique, PRIMARY KEY (contain not null, unique), FOREIGN KEY, check and REFERENCE.

    Notes:
        - Table can contain anly one IDENTITY
        - We can not generated by default a column without make IDENTITY
*/

-- Generated By & NULL & Check & Unique
CREATE TABLE employees (
    -- No Manual Insertion
    empl_id0 NUMBER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    -- We Can Insert Value
    empl_id1 NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    -- Generate If value is null
    emp_id2 NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    -- Generate Primary Key
    empl_id NUMBER GENERATED BY DEFAULT AS identity (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    emp_name VARCHAR2(255) NOT NULL,
    emp_email VARCHAR2(255) UNIQUE,
    emp_gender VARCHAR(1) CHECK (emp_gender IN ('F', 'M')),

    -- Inline Decalration
    CONSTRAINT cp_employee_gender PRIMARY  key(emp_name, emp_email)
);

-- Primary KEY
CREATE TABLE employees (
    -- Inline Declaration: Generate Primary Key
    empl_id NUMBER GENERATED BY DEFAULT AS identity (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    emp_email VARCHAR2(255) UNIQUE,
    emp_name VARCHAR2(255) UNIQUE,
    -- Outnine Declaration
    CONSTRAINT cp_employee_gender PRIMARY  key(emp_name, emp_email)
);

-- FOREIGN Key
CREATE TABLE workers (
	work_id NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
	work_name varchar(255) UNIQUE,
	emp_id NUMBER NOT NULL,
	PRIMARY KEY (work_id),
	CONSTRAINT fg_emp_work FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
);



