// Start Learning Sass



// Import And Use And Advanced Architecture
@import url("../sass/layout/_global-roles.scss");
@use "../sass/pages/contact";
/*
    It Is Improtant To Create Sass Folder That Contain [Two Folder layout and pages]
    layout cerate "_global-roles.scss" 
        _ : When Compling --> No Creation Of The Filies [*.css, ...]

    - in "_global-roles.scss" -->  Write A Global Roles
    - in "main.scss" --> @use "sass/layout/global-roles.scss"
    - in "main.css" --> Must Show The Global Roles
*/




// Varibles
/*
    syntax : $varName
    !global : make it global
    in best practice make a folder in the project "varibles" with file "_colors.scss"
    in "_colors.scss" --> put the variables

    --> Import
        @use "sass/varibles/colors"; ==> use colors.$vanName
        @use "sass/varibles/colors" as *; use The Varibles name Directly 
    --> Local Varibles PowerFull Of The Varibles That Exit In File "colors.scss"
*/
// Import Varibles
@use "sass/varibles/colors" as *; // For Using Externel Varibles
@use "sass/varibles/colors"; // Use colors.$varName
$main_color: red;
$border_color: orange;
footer {
    $border_color: black !global; // Global Varibles
    $border-radius: 10px; // Local Varible
    border: 2px solid $border_color;
    border-radius: $border-radius;
}
.content {
    background-color: $main_color;
    border: $main_color 2px solid;
    border: 2px solid $border_color;
}
$max_width: "max-width: 767px";
@media ($max_width) {
    .content {
        background-color: $back_color;
    }
}





// Nestiong And Parent Element
/*
    > --> Direct child
    + --> Next Element
    &.red --> For box.red
*/

.parent {
    color: blue;
}
.child {
    font-weight: bold;
}
// in Sass
.parent {
    color: blue;
    .child {
        font-weight: bold;
        .first-child { background-color: red; }
    }
}
.parent-one, .parent-two {
    padding: 20px;
    .child {
        padding: 10px;
    }
}
.parent > .child {
    font-size: 30px;
}
.parent  {
    > { .child-one {font-size: 30px;}
        .child-two {font-size: 30px;}
    }
}
.parent {
    > .child {display: grid;} // This is Direct Child
    .test {display: black;} // This is Not Direct Child
    + p {text-align: center;}
}
.parent + {
    p {color: red;}
    span {color: blue;}
    button {color: grey;}
}
.parent {
    > .child { color: green; }
    + .child-two { color: yellow; }
}

.box {
    .title { text-align: center; }
    + .description { color: red; }
    &.red { background-color: red; }
    &.green { background-color: green; } // .green.box
    &:hover { background-color: yellow; } // box:hover
    &.red:hover { font-size: 50px; } // box.red:hover
    &:hover .title { font-size: 100px; } // .box:hover .title
    :not(&) { font-weight: bold; } // :not(.box)
    [title="box"] & { padding: 50px; } // [title=box] .box 
    *[title="box"] { padding: 50px; } // .box *[title=box]
}




// Property Declarations And Placeholder
/*
    @extend .className --> This is A Class That Exit in Html Page
        - Use The Same Class On Many Different Elements To Give Them The Same Look
    @extend %name --> This is Placeholder For Just Taking The Source
        - Placeholders are special selectors
        - They do not exist in the HTML page
        - Use For Sharing The Style For Diffrent Elements
*/
.box {
    color: red;
    font : {
        size: 10px;
        weight: bold;
    }
    margin: auto {
        top: 10x;
        right: 20px;
    };
}
%main-display { // This is Placeholder For Just Taking The Source
    display: flex;
    justify-content: center;
    align-items: center;
}
.main-box {
    background-color: #eee;
    padding: 10px;
    margin: 10px;
}
.ads {
    @extend .main-box;
    @extend %main-display;
    color: green;
}
.articles {
    @extend .main-box;
    @extend %main-display;
    color: red;
}




// Control Flow --> If and Else
/*
    --> First Method
    @if condition {
        // Instruction
    } else {
        // instruction
    }
    --> Second Method
    border-radius: if ($varName, 10px, 100px);
        if Condition True --> 10px
        else 100px
        -- if you replace 100px with null and condition not 
            verify so you can see border-radius in main.css
*/
$theme : "dark";
.page {
    @if $theme == "light" {
        background-color: white;
        color: #eee;
    } @else {
        background-color: #444;
        color: white;
    }
}
$rounded: false;
$media_check: "767px";
.box {
    border-radius: if($rounded, 10px, 100px);
    background-color: if($media_check == "767px", black, green);
}





