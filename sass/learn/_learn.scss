// Start Learning Sass



// Import And Use And Advanced Architecture
@import url("../sass/layout/_global-roles.scss");
@use "../sass/pages/contact";
/*
    It Is Improtant To Create Sass Folder That Contain [Two Folder layout and pages]
    layout cerate "_global-roles.scss" 
        _ : When Compling --> No Creation Of The Filies [*.css, ...]

    - in "_global-roles.scss" -->  Write A Global Roles
    - in "main.scss" --> @use "sass/layout/global-roles.scss"
    - in "main.css" --> Must Show The Global Roles
*/




// Varibles
/*
    syntax : $varName
    !global : make it global
    in best practice make a folder in the project "varibles" with file "_colors.scss"
    in "_colors.scss" --> put the variables

    --> Import
        @use "sass/varibles/colors"; ==> use colors.$vanName
        @use "sass/varibles/colors" as *; use The Varibles name Directly 
    --> Local Varibles PowerFull Of The Varibles That Exit In File "colors.scss"
*/
// Import Varibles
@use "sass/varibles/colors" as *; // For Using Externel Varibles
@use "sass/varibles/colors"; // Use colors.$varName
$main_color: red;
$border_color: orange;
footer {
    $border_color: black !global; // Global Varibles
    $border-radius: 10px; // Local Varible
    border: 2px solid $border_color;
    border-radius: $border-radius;
}
.content {
    background-color: $main_color;
    border: $main_color 2px solid;
    border: 2px solid $border_color;
}
$max_width: "max-width: 767px";
@media ($max_width) {
    .content {
        background-color: $back_color;
    }
}





// Nestiong And Parent Element
/*
    > --> Direct child
    + --> Next Element
    &.red --> For box.red
*/

.parent {
    color: blue;
}
.child {
    font-weight: bold;
}
// in Sass
.parent {
    color: blue;
    .child {
        font-weight: bold;
        .first-child { background-color: red; }
    }
}
.parent-one, .parent-two {
    padding: 20px;
    .child {
        padding: 10px;
    }
}
.parent > .child {
    font-size: 30px;
}
.parent  {
    > { .child-one {font-size: 30px;}
        .child-two {font-size: 30px;}
    }
}
.parent {
    > .child {display: grid;} // This is Direct Child
    .test {display: black;} // This is Not Direct Child
    + p {text-align: center;}
}
.parent + {
    p {color: red;}
    span {color: blue;}
    button {color: grey;}
}
.parent {
    > .child { color: green; }
    + .child-two { color: yellow; }
}

.box {
    .title { text-align: center; }
    + .description { color: red; }
    &.red { background-color: red; }
    &.green { background-color: green; } // .green.box
    &:hover { background-color: yellow; } // box:hover
    &.red:hover { font-size: 50px; } // box.red:hover
    &:hover .title { font-size: 100px; } // .box:hover .title
    :not(&) { font-weight: bold; } // :not(.box)
    [title="box"] & { padding: 50px; } // [title=box] .box 
    *[title="box"] { padding: 50px; } // .box *[title=box]
}




// Property Declarations And Placeholder
/*
    @extend .className --> This is A Class That Exit in Html Page
        - Use The Same Class On Many Different Elements To Give Them The Same Look
    @extend %name --> This is Placeholder For Just Taking The Source
        - Placeholders are special selectors
        - They do not exist in the HTML page
        - Use For Sharing The Style For Diffrent Elements
*/
.box {
    color: red;
    font : {
        size: 10px;
        weight: bold;
    }
    margin: auto {
        top: 10x;
        right: 20px;
    };
}
%main-display { // This is Placeholder For Just Taking The Source
    display: flex;
    justify-content: center;
    align-items: center;
}
.main-box {
    background-color: #eee;
    padding: 10px;
    margin: 10px;
}
.ads {
    @extend .main-box;
    @extend %main-display;
    color: green;
}
.articles {
    @extend .main-box;
    @extend %main-display;
    color: red;
}




// Control Flow --> If and Else
/*
    --> First Method
    @if condition {
        // Instruction
    } else {
        // instruction
    }
    --> Second Method
    border-radius: if ($varName, 10px, 100px);
        if Condition True --> 10px
        else 100px
        -- if you replace 100px with null and condition not 
            verify so you can see border-radius in main.css
*/
$theme : "dark";
.page {
    @if $theme == "light" {
        background-color: white;
        color: #eee;
    } @else {
        background-color: #444;
        color: white;
    }
}
$rounded: false;
$media_check: "767px";
.box {
    border-radius: if($rounded, 10px, 100px);
    background-color: if($media_check == "767px", black, green);
}




// Create Triangle With If And Else
%main_style {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px auto;
}
.main {
    padding: 20px;
    border: 2px solid black;
    width: 100px;
    height: 100px;
    @extend %main_style;
}
$direction: "right"; // top || right || left || bottom
.arrow-div {
    @extend .main;
    position: relative;
    &::before {
        content: "";
        position: absolute;
        background-color: red;
        width: 0;
        height: 0;
        border: 20px solid black;
        background-color: transparent;
        border-color: yellow red blue green;
        @if $direction == "top" { 
            top: -40px;
            border-color: transparent transparent green transparent;
        } 
        @else if ($direction == "right") {
            right: -40px;
            border-color: transparent transparent transparent green;
        } 
        @else if ($direction == "left") {
            left: -40px;
            border-color: transparent green transparent transparent;
        } 
        @else if $direction == "bottom" {
            bottom: -40px;
            border-color: green transparent transparent transparent;
        } @else {
            @error "This Direction #{$direction} Does Not Exit"
        }
    }
}


// and not or 
/*
    use [or, not, and] --> [&&, ||, !]
*/
$number: 10;
$color: red;
$theme: light;
.class {
    color: if($number > 5 or $color == red and not $theme == light, $color, $color);
}




// Interpolation
/*
    Declare A Varible
        $varName: "value";
    Use It As A Class
        .#{varName} { proprities }
*/

$company: "falcon";
$position: "left";

.ad-#{$company}-#{unique-id()} {
    font-size: 10px;
    background-color: url("imgs/#{$company}.png");
    #{$position}: 0;
}



// Comments And Documenting
// This Comment Will Not Show In Css File   
/* This Comment Will Show In Css File And Not In Compresed Mode */
/*! This Comment Will Show In Css File And In Compresed Mode */
.box {
    font-size: 10px; // This Font Size
}
$company: "google";
/* This Comment Contain Interpolation --> #{$company} */

/// Function To Do Bla Bla Bla
/// 
/// @param {num}
/// The Number Of Number Of Bla Bla Bla
/// @return {int}
/// 




// Mixin And Include
/*
    @mixin class(arguments) {
        // Styling
    }
    .class {
        @include class(parameters);
    }
    - We Can Do The Mixin In The File
    
*/

// Improt Mixin File
@use "helpers/mixins" as *;
@mixin list-reset {
    padding: 0;
    margin: 0;
    list-style: none;
}
ul.links {
    @include list-reset;
}
@mixin circle($width, $height) {
    border-radius: 50%;
    width: $width;
    height: $height;
}
.circle-100 {
    @include circle(100px, 100px);
}
.circle-200 {
    @include circle(200px, 200px);
}
@mixin centering {
    display: flex;
    align-items: center;
    justify-content: center;
    // @include circle(100px, 100px);
}
.center-circle {
    @include centering;
    @include circle(400px, 400px);
}




// Each + Maps
/*
    $varibles: names;
    @each <variable> in <expression> { ... } 
*/
// Theme Example
$themes: red, green, blue;
@each $theme in $themes {
    .#{$theme}-theme {
        background-color: #eee;
        .product {
            background-color: $theme;
            .title {    
                color: $theme;
                font-weight: bold;
            }
        }
    }
}

// Social Example
$social : (
    "facebook": blue,
    "youtube": red,
    "github": black,
);
@each $name, $color in $social {
    .#{$name} {
        background-color: $color;
        &::before {
            content: $name;
        }
    }
}

// Descturing Example
$classes : "one" 15px red, "two" 30px blue, "three" 10px green;
@each $class, $font, $color in $classes {
    .#{$class} {
        font-size: $font;
        color: $color;
        padding: calc($font / 2);
    }
}



// Repeat Each And Map With A Practical Example


// Loop => While
/*
    @for <variable> from <start> to <end> { ... }
    @for <variable> from <start> through <end> { ... }
    @while <Condition> { ... }
*/
$start : 1;
$end : 10;
@for $i from $start to $end {
    .class {
        color: green;
    }
}

@while $start <= $end {
    .class-#{$start * 1} {
        width: $start * 100px;
        height: ($start * 100px) / 2;
    }
    $start: $start + 1;
}




// Create Bootstrap Grid System
$grid_cols: 12;

@for $i from 1 to $grid_cols {
    .col-#{$i} {
        // width: (100% / 12) * $i;
        width: percentage($i / $grid_cols);
    }
}



// Functions
@use "../sass/helpers/functions" as *; // The half() and calculate() functions
@function half($size: auto) {
    @return $size / 2;
}
@function calculate($sizes...) {
    $total: 0;
    @each $size in $sizes {
        $total: $total + $size;
    }
    @return $total;
}
.element {
    width: half(200px);
    height: calculate(12px, 23px, 45px);
}



// Practice Mixin With Content
@mixin overlay($color, $opacity) {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba($color, $opacity);
}
.content {
    @include overlay(black, 0.1);
}
@mixin keyF($animation) {
    @keyframes #{$animation} {
        @content;
    }
}
@include keyF("fade_in") {
    from { opacity: 0;  } 
    to {  opacity: 1; }
}
@include keyF("go-up") {
    from { top: 0; }
    to { top: 100%; }
}





